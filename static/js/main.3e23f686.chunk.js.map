{"version":3,"sources":["reduxlayer/actions/index.js","components/SubmissionScreen.js","components/Framework.js","components/Quest.js","components/OtherOption.js","components/Form.js","App.js","serviceWorker.js","reduxlayer/reducers/index.js","reduxlayer/store/index.js","index.js"],"names":["addToQuestions","frameworkName","type","addToAnswers","q","a","question","answer","SubmissionScreen","props","location","state","answers","map","data","i","className","key","QuestionAnswers","comment","Comment","connect","json","otherVis","dispatch","showOtherOpt","value","framework","onChange","name","qIndex","questions","counter","anwers","onClick","updateCommentText","text","useState","submitButtonVis","setSubmitButtonVis","history","useHistory","disabled","push","pathname","placeholder","e","target","basename","process","path","exact","component","Form","render","object","Boolean","window","hostname","match","require","reducer","action","qs","find","obj","console","log","concat","length","store","createStore","applyMiddleware","logger","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.3e23f686.chunk.js","sourcesContent":["export const addToQuestions = frameworkName => ({\n  type: \"ADD_TO_QUESTIONS\",\n  frameworkName: frameworkName\n});\n\nexport const addToAnswers = (q, a) => ({\n  type: \"ADD_TO_ANSWERS\",\n  question: q,\n  answer: a\n});\n\nexport const showOtherOpt = value => ({\n  type: \"CHANGE_OTHER_VIS\",\n  value: value\n});\n\nexport const updateCommentText = text => ({\n  type: \"UPDATE_COMMENT_TEXT\",\n  text: text\n});\n","import React from \"react\";\n\nconst QuestionAnswers = props => {\n  const answers = props.location.state.answers;\n\n  return answers.map((data, i) => {\n    return (\n      <div className=\"jumbotron\" key={i}>\n        <h1 className=\"display-5\">{data.question}</h1>\n        <p className=\"lead\">{data.answer}</p>\n      </div>\n    );\n  });\n};\n\nconst Comment = props => {\n  const comment = props.location.state.comment;\n  return (\n    <div className=\"jumbotron\">\n      <h3 className=\"text-monospace\">Yorum : \"{comment}\"</h3>\n    </div>\n  );\n};\n\nconst SubmissionScreen = props => {\n  return (\n    <div>\n      {QuestionAnswers(props)}\n      {Comment(props)}\n    </div>\n  );\n};\nexport default SubmissionScreen;\n","import React from \"react\";\nimport { connect } from \"react-redux\";\nimport { addToQuestions, showOtherOpt } from \"../reduxlayer/actions\";\n\nconst Framework = props => {\n  return props.json.map((framework, i) => {\n    return (\n      <div key={i} className=\"input-group mb-3\">\n        <div className=\"input-group-prepend\">\n          <div className=\"input-group-text \">\n            <input\n              type=\"checkbox\"\n              onChange={() => {\n                if (framework.name !== \"Diğer\")\n                  props.addToQuestions(framework.name);\n                else if (framework.name === \"Diğer\") props.showOtherOpt(true);\n              }}\n            />\n          </div>\n        </div>\n        <div className=\"form-control\">{framework.name}</div>\n      </div>\n    );\n  });\n};\n\nconst mapStateToProps = state => ({\n  json: state.data,\n  otherVis: state.otherVis\n});\n\nconst mapDispatchToProps = dispatch => ({\n  addToQuestions: frameworkName => dispatch(addToQuestions(frameworkName)),\n  showOtherOpt: value => dispatch(showOtherOpt(value))\n});\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(Framework);\n","import React from \"react\";\nimport { connect } from \"react-redux\";\nimport { addToAnswers } from \"../reduxlayer/actions\";\n\nconst Quest = props => {\n  return props.qIndex ? (\n    <ul className=\"list-group\">\n      {props.questions[props.counter].question}\n      {props.questions[props.counter].anwers.map((a, i) => (\n        <li key={i} className=\"list-group-item\">\n          <button\n            className=\"btn btn-info\"\n            key={i}\n            onClick={() =>\n              props.addToAnswers(props.questions[props.counter].question, a)\n            }\n          >\n            {a}\n          </button>\n        </li>\n      ))}\n    </ul>\n  ) : (\n    <ul>Framework seçimi yap..</ul>\n  );\n};\n\nconst mapStateToProps = state => ({\n  qIndex: state.qIndex,\n  questions: state.questions,\n  counter: state.counter\n});\n\nconst mapDispatchToProps = dispatch => ({\n  addToAnswers: (q, a) => dispatch(addToAnswers(q, a))\n});\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(Quest);\n","import React, { useState } from \"react\";\nimport { connect } from \"react-redux\";\nimport { useHistory } from \"react-router-dom\";\nimport { updateCommentText } from \"../reduxlayer/actions\";\n\nconst OtherOption = props => {\n  const [submitButtonVis, setSubmitButtonVis] = useState(true);\n  let history = useHistory();\n\n  return (\n    <div className=\"input-group mb-3\">\n      <div className=\"input-group-prepend\">\n        <button\n          className=\"btn btn-outline-success\"\n          type=\"button\"\n          disabled={submitButtonVis}\n          onClick={() =>\n            history.push({\n              pathname: \"/submission\",\n              state: {\n                answers: props.answers,\n                comment: props.comment\n              }\n            })\n          }\n        >\n          Gönder\n        </button>\n      </div>\n      <input\n        type=\"text\"\n        className=\"form-control\"\n        placeholder=\"Yorum yaz..\"\n        onChange={e => {\n          if (e.target.value !== \"\") setSubmitButtonVis(false);\n          else setSubmitButtonVis(true);\n          props.updateCommentText(e.target.value);\n        }}\n      />\n    </div>\n  );\n};\n\nconst mapStateToProps = state => ({\n  answers: state.answers,\n  comment: state.comment\n});\n\nconst mapDispatchToProps = dispatch => ({\n  updateCommentText: text => dispatch(updateCommentText(text))\n});\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(OtherOption);\n","import React from \"react\";\nimport { connect } from \"react-redux\";\nimport Framework from \"./Framework\";\nimport Quest from \"./Quest\";\nimport OtherOption from \"./OtherOption\";\n\nconst Form = props => (\n  <div>\n    <Framework />\n    {props.counter < props.qIndex && <Quest />}\n    {((props.counter !== 0 && props.counter === props.qIndex) ||\n      props.otherVis === true) && <OtherOption />}\n  </div>\n);\n\nconst mapStateToProps = state => ({\n  counter: state.counter,\n  otherVis: state.otherVis,\n  qIndex: state.qIndex\n});\n\nexport default connect(\n  mapStateToProps,\n  null\n)(Form);\n","import React from \"react\";\nimport { connect } from \"react-redux\";\nimport { addToQuestions, addToAnswers } from \"./reduxlayer/actions\";\nimport { BrowserRouter, Route } from \"react-router-dom\";\nimport SubmissionScreen from \"./components/SubmissionScreen\";\nimport Form from \"./components/Form\";\nimport \"./App.css\";\n\nfunction App(props) {\n  return (\n    <div className=\"App\">\n      <BrowserRouter basename={process.env.PUBLIC_URL}>\n        <Route path=\"/\" exact component={Form} />\n        <Route\n          path=\"/submission\"\n          render={props => (\n            <SubmissionScreen object={props.answers} {...props} />\n          )}\n        />\n      </BrowserRouter>\n    </div>\n  );\n}\n\nconst mapStateToProps = state => ({\n  json: state.data,\n  qIndex: state.qIndex,\n  questions: state.questions,\n  counter: state.counter,\n  otherVis: state.otherVis,\n  answers: state.answers\n});\n\nconst mapDispatchToProps = dispatch => ({\n  addToQuestions: frameworkName => dispatch(addToQuestions(frameworkName)),\n  addToAnswers: (q, a) => dispatch(addToAnswers(q, a))\n});\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","const data = require(\"../../surveydata.json\");\n\nconst reducer = (\n  state = {\n    data: data,\n    questions: [],\n    qIndex: 0,\n    answers: [],\n    counter: 0,\n    otherVis: false,\n    comment: \"\"\n  },\n  action\n) => {\n  switch (action.type) {\n    case \"ADD_TO_QUESTIONS\": {\n      let qs;\n      state.data.find(obj => {\n        if (obj.name === action.frameworkName) qs = obj.questions;\n      });\n      console.log(qs);\n\n      return {\n        ...state,\n        questions: state.questions.concat(qs),\n        frameworkName: action.frameworkName,\n        qIndex: state.qIndex + qs.length\n      };\n    }\n    case \"ADD_TO_ANSWERS\": {\n      var obj = {\n        question: action.question,\n        answer: action.answer\n      };\n      console.log(obj);\n      return {\n        ...state,\n        answers: state.answers.concat(obj),\n        counter: state.counter + 1\n      };\n    }\n\n    case \"CHANGE_OTHER_VIS\": {\n      return {\n        ...state,\n        otherVis: action.value\n      };\n    }\n\n    case \"UPDATE_COMMENT_TEXT\": {\n      return {\n        ...state,\n        comment: action.text\n      };\n    }\n    default:\n      return state;\n  }\n};\n\nexport default reducer;\n","import { createStore, applyMiddleware } from \"redux\";\nimport logger from \"redux-logger\";\nimport reducer from \"../reducers/index\";\n\nconst store = createStore(reducer, applyMiddleware(logger));\n\nexport default store;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { Provider } from \"react-redux\";\nimport store from \"./reduxlayer/store/index\";\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}